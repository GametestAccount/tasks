     1                                  ; https://syscalls.mebeim.net/?table=x86/64/x64/v6.5
     2                                  
     3                                  ; build:
     4                                  ;   nasm -f elf64 task2.asm
     5                                  ;   ld task2.o -o task2
     6                                  ;   ./task2
     7                                  
     8                                  ; listing: nasm -f elf64 task2.asm -l task2.lst
     9                                  ; tracing: strace ./task2 > strace_output.txt
    10                                  
    11                                  global _start                      ; делаем метку _start видимой извне
    12                                  
    13                                  section .data                      ; секция данных
    14 00000000 48656C6C6F20776F72-         message db  "Hello world!", 10 ; строка для вывода на консоль
    14 00000009 6C64210A           
    15                                      length  equ $ - message
    16                                  
    17 0000000D 746573742E74787400          filename db  "test.txt", 0     ; строка с именем файла (и завершающим нулевым символом)
    18                                  
    19                                  section .text                      ; объявление секции кода
    20                                  _start:                            ; точка входа в программу
    21 00000000 B855000000                  mov rax, 85                    ; creat()
    22 00000005 48BF-                       mov rdi, filename              ; передаём адрес строки с именем файла
    22 00000007 [0D00000000000000] 
    23 0000000F BEA4010000                  mov rsi, 644Q                  ; передаём значение прав на файл (владелец всё может, а остальные только читают)
    24 00000014 0F05                        syscall                        ; выполняем системный вызов creat()
    25 00000016 4883F800                    cmp rax, 0                     ; проверяем возвращаемое значение
    26 0000001A 743E                        je exit_failure                ; если там NULL, то аварийно завершаем программу
    27                                  
    28 0000001C 4989C0                      mov r8, rax                    ; сохраняем дескриптор на открытый файл в регистр R8
    29                                  
    30 0000001F B801000000                  mov rax, 1                     ; write()
    31 00000024 4C89C7                      mov rdi, r8                    ; передаём указатель на открытый файл
    32 00000027 48BE-                       mov rsi, message               ; адрес строки для вывод
    32 00000029 [0000000000000000] 
    33 00000031 BA0D000000                  mov rdx, length                ; количество байтов
    34 00000036 0F05                        syscall                        ; выполняем системный вызов write()
    35 00000038 4883F80D                    cmp rax, length                ; проверяем возвращаемое значение
    36 0000003C 751C                        jne exit_failure               ; если там НЕ length, то аварийно завершаем программу
    37                                  
    38 0000003E B803000000                  mov rax, 3                     ; close()
    39 00000043 4C89C7                      mov rdi, r8                    ; передаём указатель на открытый файл
    40 00000046 0F05                        syscall                        ; выполняем системный вызов close()
    41 00000048 4883F800                    cmp rax, 0                     ; проверяем возвращаемое значение
    42 0000004C 750C                        jne exit_failure               ; если там НЕ 0, то аварийно завершаем программу
    43                                  
    44 0000004E B83C000000                  mov rax, 60                    ; exit()
    45 00000053 BF00000000                  mov rdi, 0                     ; передаём EXIT_SUCCESS
    46 00000058 0F05                        syscall                        ; выполняем системный вызов exit(EXIT_SUCCESS)
    47                                  
    48                                  exit_failure:
    49 0000005A B83C000000                  mov rax, 60                    ; exit()
    50 0000005F BF01000000                  mov rdi, 1                     ; передаём EXIT_FAILURE
    51 00000064 0F05                        syscall                        ; выполняем системный вызов exit(EXIT_FAILURE)
