     1                                  ; https://syscalls.mebeim.net/?table=x86/64/x64/v6.5
     2                                  
     3                                  global _start
     4                                  
     5                                  section .data
     6 00000000 456E74657220796F75-         enter_msg db "Enter your string: "
     6 00000009 7220737472696E673A-
     6 00000012 20                 
     7                                      LEN_1 equ $ - enter_msg
     8                                  
     9 00000013 52657665727365643A-         result_msg db "Reversed: "
     9 0000001C 20                 
    10                                      LEN_2 equ $ - result_msg
    11                                  
    12                                  section .bss
    13 00000000 <res 40h>                   buffer resb 64               ; зарезервировать 64 байта в буфере
    14                                  
    15                                  section .text
    16                                  _start:
    17 00000000 B801000000                  mov rax, 1                   ; write()
    18 00000005 BF01000000                  mov rdi, 1                   ; передаём дескриптор stdout
    19 0000000A 48BE-                       mov rsi, enter_msg           ; передаём сообщение на вывод
    19 0000000C [0000000000000000] 
    20 00000014 BA13000000                  mov rdx, LEN_1               ; передаём размер сообщения в байтах
    21 00000019 0F05                        syscall
    22 0000001B 4883F8FF                    cmp rax, -1                  ; проверить возвращаемое значение
    23 0000001F 747B                        je .exit_failure             ; если там -1, то аварийно завершаем программу
    24                                  
    25 00000021 B800000000                  mov rax, 0                   ; read()
    26 00000026 BF00000000                  mov rdi, 0                   ; передаём дескриптор stdin
    27 0000002B 48BE-                       mov rsi, buffer              ; передаём буфер, куда буду считываться данные
    27 0000002D [0000000000000000] 
    28 00000035 BA40000000                  mov rdx, 64                  ; передаём размер буфера в байтах
    29 0000003A 0F05                        syscall
    30 0000003C 4883F8FF                    cmp rax, -1                  ; проверить возвращаемое значение
    31 00000040 745A                        je .exit_failure             ; если там -1, то аварийно завершаем программу
    32                                  
    33 00000042 4989C7                      mov r15, rax                 ; сохраняем количество прочитанных байт
    34                                  
    35 00000045 4C89FF                      mov rdi, r15                 ; передаём в функцию количество байт в буфере
    36 00000048 48FFCF                      dec rdi                      ; отбрасываем \n в конце
    37 0000004B E858000000                  call func_reverse
    38                                  
    39 00000050 B801000000                  mov rax, 1                   ; write()
    40 00000055 BF01000000                  mov rdi, 1                   ; передаём дескриптор stdout
    41 0000005A 48BE-                       mov rsi, result_msg          ; передаём сообщение на вывод
    41 0000005C [1300000000000000] 
    42 00000064 BA0A000000                  mov rdx, LEN_2               ; передаём размер сообщения в байтах
    43 00000069 0F05                        syscall
    44 0000006B 4883F8FF                    cmp rax, -1                  ; проверить возвращаемое значение
    45 0000006F 742B                        je .exit_failure             ; если там -1, то аварийно завершаем программу
    46                                  
    47 00000071 B801000000                  mov rax, 1                   ; write()
    48 00000076 BF01000000                  mov rdi, 1                   ; передаём дескриптор stdout
    49 0000007B 48BE-                       mov rsi, buffer              ; передаём сообщение на вывод
    49 0000007D [0000000000000000] 
    50 00000085 4C89FA                      mov rdx, r15                 ; передаём размер сообщения в байтах
    51 00000088 0F05                        syscall
    52 0000008A 4883F8FF                    cmp rax, -1                  ; проверить возвращаемое значение
    53 0000008E 740C                        je .exit_failure             ; если там -1, то аварийно завершаем программу
    54                                  
    55 00000090 B83C000000                  mov rax, 60                  ; exit()
    56 00000095 BF00000000                  mov rdi, 0                   ; передаём EXIT_SUCCESS
    57 0000009A 0F05                        syscall
    58                                  
    59                                  .exit_failure:
    60 0000009C B83C000000                  mov rax, 60                  ; exit()
    61 000000A1 BF01000000                  mov rdi, 1                   ; передаём EXIT_FAILURE
    62 000000A6 0F05                        syscall
    63                                  
    64                                  func_reverse:
    65 000000A8 55                          push rbp                     ; сохраняем значение RBP в стеке
    66 000000A9 4889E5                      mov rbp, rsp                 ; копируем вершину стека в RBP
    67                                  
    68                                      ; rax = LEN / 2
    69 000000AC 4889F8                      mov rax, rdi                 ; копируем количество байт в буфере (1-й аргумент функции)
    70 000000AF 48D1E8                      shr rax, 1                   ; деление на 2
    71                                  
    72                                      ; rcx = i
    73 000000B2 B900000000                  mov rcx, 0                   ; i = 0
    74                                  
    75                                  .loop:
    76                                      ; rsi = LEN - i - 1
    77 000000B7 4889FE                      mov rsi, rdi
    78 000000BA 4829CE                      sub rsi, rcx
    79 000000BD 48FFCE                      dec rsi
    80                                  
    81 000000C0 448A91[00000000]            mov r10b, [buffer + rcx]     ; копируем в регистр R10 байт buffer[i]
    82 000000C7 448A9E[00000000]            mov r11b, [buffer + rsi]     ; копируем в регистр R11 байт buffer[LEN - i - 1]
    83 000000CE 4D87D3                      xchg r10, r11                ; меняем значения регистров между собой
    84 000000D1 448891[00000000]            mov [buffer + rcx], r10b     ; возвращаем байт из R10 в память
    85 000000D8 44889E[00000000]            mov [buffer + rsi], r11b     ; возвращаем байт из R11 в память
    86                                  
    87 000000DF 48FFC1                      inc rcx                      ; i++
    88 000000E2 4839C1                      cmp rcx, rax                 ; проверяем i
    89 000000E5 75D0                        jne .loop                    ; если i != LEN/2, то продолжаем цикл
    90                                  
    91 000000E7 4889EC                      mov rsp, rbp                 ; восстанавливаем старое значение вершины стека
    92 000000EA 5D                          pop rbp                      ; удаляем из стека RBP
    93 000000EB C3                          ret
